1. CSS - каскадная таблица стилей. Нужна для декорирования внешнего вида документа

2. 3. px - единица измерения в пикселях. Точная единица, не изменяемая
   % - изменяемая единица измерения, считается от родительского блока, адаптивна
   vw - зависимость от ширины экрана в %, адаптивна
   vh - зависимость от высоты экрана в %, адаптивна
   em - размер относительно ширины родительского элемента
   rem - размер относительно размера шрифта в HTML, по умолчанию 16px
   Vmin - размер в % от меньшего размера
   Vmax - размер в % от большего размера 
   
 4. Классы в CSS необходим для применения стиля для определенного элемента или блока.
    Индентификатор (он же ID) - уникальное имя элемента, используется для изменения его стиля и для обращения к нему через скрипты
    
5. Бордер позволяет управлять внешними границами элемента, его толщиной, цветом и стилем

6. Управлять размером шрита можно с помощью свойства font-size

7. Псевдокласс позволяет устанавливать особые свойства для класс

8. Padding-top - верхняя граница элемента, padding-bottom - нижняя граница элемента, padding-left - левая граница элемента, padding-right - правая граница элемента

9. Чтобы создать CSS-анимацию вы должны добавить в стиль элемента, который хотите анимировать, свойство animation или его подсвойства:
      animation-name - имя подсвойста
      animation-duration - определяет время для одного цикла анимации
      animation-timing-function - скорость анимации
      animation-delay - задержка згрузки анимации
      animation-iteration-count - количество повторений аниимации
      animation-direction - позволяет при повторе анимации задавать новые значени
      animation-fill-mode - значения до и после выполнения анимации
      animation-play-state - приостановление и возобновление анимации
      
10. ::before - позволяет устаноить элемент(картинку, такст и пр) перед основным элементом
    ::after - позволяет установть элемент (картинку, текст и пр) после основного элемента
    
11. Для позиционирования элементов изпользуется свойство position. Его основные значения:
      relative - можно задавать зачени лево-право-низ-верх
      absolute - фиксирует положение на странице. Должен иметь родителя relative
      fixed - фиксируется внутри родителя, не смещается со страницей
      stiky - двигается внутри контейнера, задается параметрами верх-низ-лево-право
      static - значение по умолчанию
      inherit - значение отображения наследуется от родителя
      
12. Градиент можно создать с помощью background или background-image

13. Flexbox позволяет более гибко управлять положением элементов на странице. Основные свойства:
      flex-direction
      flex-wrap
      flex-flow
      order
      justify-content
      align-items
      align-self
      align-content
      
14. CSS-свойство transform позволяет вам поворачивать, масштабировать, наклонять или сдвигать элемент. 

15. Грид — это макет для сайта (его схема, проект). Грид-модель позволяет размещать контент сайта (располагать его определенным образом, позиционировать).
    Она позволяет создавать структуры, необходимые для обеспечения отзывчивости сайтов на различных устройствах. Это означает, что сайт будет одинаково хорошо 
    смотреться на компьютере, телефоне и планшете.
    
16. Медиа-запрос позволяет адаптировать сайт под разные устройства (планшет, ттелефон). С его помощью можно задавать значения при разном размере экрана

17. JavaScript - язык программирование, позволяющий создавать динамический сайты

18. Переменная создается с помощью let, поддерживает типы данных - 
      string - строка, 
      number - число, 
      boolean - болевое значение (true, false), 
      undefined - значение не определено, 
      symbol - символ, 
      bigint - большое число
      
19. if-else - конструкция, которая помогает выяснить, выражение истинно или ложно

20. Для создания функций мы можем использовать объявление функции. Вначале идёт ключевое слово function , после него имя функции, 
    затем список параметров в круглых скобках через запятую (может не содержать значений) и, наконец, код функции, также называемый «телом функции», 
    внутри фигурных скобок.

21. Цикл позволяет использовать код внутри себя несколько раз. Используются для того, чтобы проделыать определенные действия с каждым элементом данных

22. Массив - это упорядоченный список элементов, доступ к которым можно получить по их индексу. Основные метода массивов:
      push - добавить элемент в конец массива
      pop - удалить элемент с конца массива
      shift - удалить элемент с начала массива
      unshift - добавить элемент в начало массива
      delete - удалить определенный элемент массива
      splice - удалить, добавить, заменить любой элемент массива
      slice - "отрезать" и вернуть определенный кусок массива
      concat - создает новый массив с данными из других  массивов
      forEach - перебора массива без его изенения
      map - перебор массива с внесением изменения, возвращает измененый массив
      
23. Обьект - коллекция данных, со значениями ключ-значение. Основные методы:
      keys - создать массив ключей обьекта
      values - ссоздать массив значений обьекта
      this - ссылается на своего владельца (родителя)
      так же можно использовать все свойства массива, так как массив тоже является обектом
      
24. Обработчик событий - функция, котопая запускается как только произошло определеное событие. 
    Используется для запуска функции, после определенного действия пользователя
    
25. AJAX - асинхронный JS. Позволяет управлять функциями и запускать их в том порядке, который необходим (не по очереди)

26. ES6 — это цикл статей о новых возможностях языка программирования JavaScript, появившихся в 6 редакции стандарта ECMAScript. Основные изменения:
      Перешли от var к let/const.
      В ES6 не нужно использовать IIFE, достаточно использовать блоки и let:
      Появились class и constructor
      В ES6 есть новые ключевые слова extends и super.
      Вместо коллбек-функций появились промисы
      Появились стрелочные функции
      
27. Promise - функция "обещание". Позволяет откладывать выполнение функции до определенного времени (например, пока не придет ответ от сервера)

28. Spread забирает каждый элемент из массива и распаковывает в новый массив. 
    Оператор rest забирает каждый элемент из массива и создает из них новый массив.
    
29. Асинхронная функция - async всегда возвращает промис. Облегчает работу с промисами

30. Метод массива reduce() позволяет превратить массив в любое другое значение с помощью переданной функции-колбэка и начального значения. 

31. Метод map() позволяет перебрать массив и вернуть его измененное состояние в новом массиве

32. Virtual DOM - копия реального DOM-дерева. При внесении изменений происходит сравнение DOM-дерева с его виртуальной копией, 
    определяется разница и запускается перерисовка того, что было изменено. 
    
33. Контекст позволяет передавать данные через дерево компонентов без необходимости передавать пропсы на промежуточных уровнях.

34. Хуки — механизм в React, который позволяет работать полностью без классов. Разновидности:
      useEffect
      useState
      useContext
      useReducer
      
35. Паттерн - шаблон разработки. позволяет создавать понятные компоненты без многоуровневого пробрасывания пропсов. Основные виды:
    Порождающие предназначены для создания экземпляра объекта или группы связанных объектов. К ним относятся:
          Abstract Factory — Абстрактная фабрика
          Builder — Строитель
          Factory Method — Фабричный метод
          Prototype — Прототип
          Singleton — Одиночка
    Структурные в основном связаны с композицией объектов, с тем, как сущности могут использовать друг друга. К ним относятся:
          Adapter — Адаптер
          Bridge — Мост
          Composite — Компоновщик
          Decorator — Декоратор
          Facade — Фасад
          Flyweight — Приспособленец
          Proxy — Заместитель
    Поведенческие связаны с распределением обязанностей между объектами. Их отличие от структурных шаблонов заключается в том, 
    что они описывают не только структуру, но и способы общения между ними. К ним относятся:
          Chain of responsibility — Цепочка обязанностей
          Command — Команда
          Interpreter — Интерпретатор
          Iterator — Итератор
          Mediator — Посредник
          Memento — Хранитель
          Observer — Наблюдатель
          State — Состояние
          Strategy — Стратегия
          Template method — Шаблонный метод
          Visitor — Посетитель
      
 36. SSR – (анг. аббревиатура от Server Side Rendering) это технология, которая позволяет, с помощью Node. js, 
     запускать JavaScript код на сервере (а не в браузере как обычно) и готовый результат отправлять пользователю, и
     збегая лишней нагрузки на его браузер и компьютер.
     
 Задачи:
  
 1.  undefined и ReferenceError
 
 2. 3 3 3 и 0 1 2
 
 3.  Hello
 
 4. true false false
 
 5. TypeError
 
 6. A: Person {firstName: "Lydia", lastName: "Hallie"} и undefined
 
 7. Захват > Цель > Всплытие
 
 8. да
 
 9. 022
 
 10.  Yay it's a string!
 
 11. { email: "my@email.com", address: {} }
